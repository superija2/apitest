package apitest;

import java.io.IOException;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.Provider;

@Secured
@Provider
public class AuthenticationFilter implements ContainerRequestFilter {

	private static final String REALM = "localhost";
	private static String authenticationScheme = "Bearer";

	@Override
	public void filter(ContainerRequestContext requestContext) throws IOException {

		// Get the Authorization header from the request
		String authorizationHeader = requestContext.getHeaderString(HttpHeaders.AUTHORIZATION);

		// Validate the Authorization header
		if (!isKnownAuthentication(authorizationHeader)) {
			abortWithUnauthorized(requestContext);
			return;
		}
		
		// Use Bearer Token authentication
		if (authenticationScheme == "Bearer") {
			try {
				// Validate the token
				validateToken(authorizationHeader.substring(authenticationScheme.length()).trim());
				return;
			} catch (Exception e) {
				abortWithUnauthorized(requestContext);
				return;
			}
		}
		
		// Use Bearer Token authentication
		if (authenticationScheme == "OAuth") {
			
		}
	}

	private boolean isKnownAuthentication(String authorizationHeader) {

		// Check if the Authorization header is valid
		// It must not be null and must be prefixed with "Bearer" and whitespace
		// The authentication scheme comparison must be case-insensitive
		
		if (authorizationHeader != null && authorizationHeader.toLowerCase().startsWith("Bearer".toLowerCase() + " ")) {
			authenticationScheme = "Bearer";
			return true;
		} else if (authorizationHeader != null && authorizationHeader.toLowerCase().startsWith("OAuth".toLowerCase() + " ")) {
			authenticationScheme = "OAuth";
			return true;
		} else {
			return false;
		}
	}

	private void abortWithUnauthorized(ContainerRequestContext requestContext) {

		// Abort the filter chain with a 401 status code response
		// The WWW-Authenticate header is sent along with the response
		requestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED)
				.header(HttpHeaders.WWW_AUTHENTICATE, authenticationScheme + " realm=\"" + REALM + "\"").build());
	}

	private void validateToken(String token) throws Exception {
		// Throw an Exception if the token is invalid
		// In production the token is gathered from the database and checked for expiration
		// In production a new token can be generated by sending a POST /authentication HTTP/1.1 with user credentials

		if (!token.equals("9D5!*24y9A6#")) {
			throw new IOException();
		}
	}
}